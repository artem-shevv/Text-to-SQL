import random
import logging
import traceback
import os
import streamlit as st
from vanna_calls import (
    generate_questions_cached,
    generate_sql_cached,
    run_sql_cached,
    generate_plotly_code_cached,
    generate_plot_cached,
    should_generate_chart_cached,
    is_sql_valid_cached,
    generate_summary_cached
)

avatar_url = "https://vanna.ai/img/vanna.svg"

st.set_page_config(layout="wide")

logging.basicConfig(
    filename="app.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

ENABLE_LOG_DOWNLOAD =  False#True

# --- Custom responsive styles ---
st.markdown("""
    <style>
        html, body, [class*="css"] {
            font-size: 14px;
        }

        @media (max-width: 768px) {
            html, body, [class*="css"] {
                font-size: 12px !important;
            }

            h1 {
                font-size: 18px !important;
                margin-top: 1rem !important; 
                margin-bottom: 0.5rem !important;
                text-align: center; 
            }

            button {
                font-size: 12px !important;
                padding: 4px 8px !important;
            }

            .stButton>button {
                height: auto !important;
                width: 100% !important;
            }

            [data-testid="stDecoration"] {
                display: none;
            }

            section[data-testid="stSidebar"] {
                padding: 0.5rem !important;
            }

            .markdown-text-container {
                font-size: 13px !important;
            }

            .stChatMessage {
                font-size: 13px !important;
            }

            .block-container {
                padding: 0.5rem 1rem 1rem 1rem !important;
            }
        }
    </style>
""", unsafe_allow_html=True)

# --- Sidebar settings ---
st.sidebar.title("Output Settings")
st.sidebar.checkbox("Show SQL", value=True, key="show_sql")
st.sidebar.checkbox("Show Table", value=True, key="show_table")
st.sidebar.checkbox("Show Plotly Code", value=True, key="show_plotly_code")
st.sidebar.checkbox("Show Chart", value=True, key="show_chart")
st.sidebar.checkbox("Show Summary", value=True, key="show_summary")

# --- Reset chat ---
if st.sidebar.button("Reset Chat", use_container_width=True):
    st.session_state.pop("chat_history", None)
    st.session_state.pop("my_question", None)
    st.session_state.pop("df", None)
    st.session_state.pop("user_input", None)  
    st.session_state.pop("last_user_id", None)  # Reset last user ID

# --- Init chat history ---
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "show_suggestions" not in st.session_state:
    st.session_state["show_suggestions"] = False

# --- Suggested Questions ---
def set_question(question):
    st.session_state["my_question"] = question
    st.session_state["df"] = None

st.title("Vanna AI")

# --- Neutral questions ---
NEUTRAL_QUESTIONS = [
    "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–±—É—á–∞–µ—Ç—Å—è?",
    "–°–∫–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ?",
    "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≥—Ä—É–ø–ø?",
    "–°–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø –Ω–∞ –∫–∞–∂–¥–æ–º –∫—É—Ä—Å–µ?",
    "–ö–∞–∫–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤–µ–¥—ë—Ç –∫–∞–∂–¥—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å?",
    "–°–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?"
]

# --- Check for ID input based on keywords ---
def check_for_id_input(user_input):
    keywords = ["—Å—Ç—É–¥–µ–Ω—Ç", "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "—É—á–∏—Ç–µ–ª—å", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]
    if any(keyword in user_input.lower() for keyword in keywords) and any(c.isdigit() for c in user_input):
        return True
    return False

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ –≤–≤–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_role(user_input):
    roles = {
        "—Å—Ç—É–¥–µ–Ω—Ç": ["—Å—Ç—É–¥–µ–Ω—Ç", "—É—á–µ–Ω–∏–∫"],
        "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å": ["–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "—É—á–∏—Ç–µ–ª—å", "–ø–µ–¥–∞–≥–æ–≥"],
        "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": ["–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]
    }

    if any(c.isdigit() for c in user_input):
        lower_input = user_input.lower()
        for role, keywords in roles.items():
            if any(keyword in lower_input for keyword in keywords):
                return role
    return None

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ---
def categorize_questions(questions):
    categorized = {
        "student": [],
        "teacher": [],
        "admin": [],
        "neutral": []
    }

    for q in questions:
        q_clean = q.strip()
        if q_clean.endswith("–Ø —Å—Ç—É–¥–µ–Ω—Ç"):
            categorized["student"].append(q)
        elif q_clean.endswith("–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"):
            categorized["teacher"].append(q)
        elif "–Ø —Å—Ç—É–¥–µ–Ω—Ç" in q_clean or "–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" in q_clean:
            # –ò—Å–∫–ª—é—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "–Ø —Å—Ç—É–¥–µ–Ω—Ç" –∏–ª–∏ "–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
            continue
        elif "–Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" in q_clean:
            categorized["admin"].append(q)
        else:
            categorized["neutral"].append(q)

    return categorized

# --- –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ü–∞ –≤–æ–ø—Ä–æ—Å–∞ ---
def clean_question_text(q):
    if not isinstance(q, str):
        return ""

    split_chars = ['?', '.']
    min_index = min([q.find(c) for c in split_chars if c in q] + [len(q)])

    cleaned = q[:min_index + 1] if min_index < len(q) else q
    return cleaned.strip()

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ---
def show_suggested_questions():
    if "show_suggestions" not in st.session_state:
        st.session_state["show_suggestions"] = False

    assistant_message_suggested = st.chat_message("assistant", avatar=avatar_url)
    if assistant_message_suggested.button("Click to show suggested questions"):
        st.session_state["show_suggestions"] = not st.session_state["show_suggestions"]
        st.session_state["my_question"] = None

    if st.session_state["show_suggestions"]:
        user_input = st.session_state.get("user_input", "")
        user_role = get_user_role(user_input)

        if user_role:
            all_questions = generate_questions_cached()
            categorized = categorize_questions(all_questions)

            max_total = 6
            n_personal = random.randint(2, max_total - 2)
            n_neutral = max_total - n_personal

            role_map = {
                "—Å—Ç—É–¥–µ–Ω—Ç": "student",
                "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å": "teacher",
                "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": "admin"
            }

            role_key = role_map.get(user_role, "neutral")

            if user_role == "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
                # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                selected_questions = categorized.get("neutral", [])[:n_neutral]
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                personalized = categorized.get(role_key, [])[:n_personal]
                neutrals = categorized.get("neutral", [])[:n_neutral]
                selected_questions = personalized + neutrals

            random.shuffle(selected_questions)
        else:
            selected_questions = NEUTRAL_QUESTIONS

        # üëá –û—á–∏—Å—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i, question in enumerate(selected_questions):
            short_q = clean_question_text(question)
            st.button(short_q, on_click=set_question, args=(short_q,), key=f"suggested_q_{i}")

# --- Chat Input ---
st.markdown("### –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
test_questions = [
    "üéì –Ø —Å—Ç—É–¥–µ–Ω—Ç 11111-222, –∫–æ–≥–¥–∞ —É –º–µ–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è?",
    "–Ø —Å—Ç—É–¥–µ–Ω—Ç 11112-222, –∫—Ç–æ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –º–æ–µ–π –≥—Ä—É–ø–ø—ã?",
    "–Ø —Å—Ç—É–¥–µ–Ω—Ç 11113-222, —á—Ç–æ —è –∏–∑—É—á—É –∑–∞ –≤—Ä–µ–º—è —É—á—ë–±—ã –Ω–∞ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?",
    "üë®‚Äçüè´ –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å 62-180-5657, –∫–∞–∫–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —è –ø—Ä–µ–ø–æ–¥–∞—é?",
    "–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å 62-180-5657, —Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —è –æ–±—É—á–∞—é?",
    "–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å 62-180-5657, –∫–∞–∫–æ–π —É –º–µ–Ω—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?",
    "üßë‚Äçüíº –Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 08-731-2673, —Å–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?",
    "–Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 08-731-2673, –∫–∞–∫–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤–µ–¥—ë—Ç –∫–∞–∂–¥—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å?",
    "–Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 08-731-2673, —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ?"
]

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if "test_question_page" not in st.session_state:
    st.session_state["test_question_page"] = 0

# –§–ª–∞–≥ –Ω–∞–∂–∞—Ç–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
if "carousel_advance" not in st.session_state:
    st.session_state["carousel_advance"] = False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
def advance_carousel():
    st.session_state["test_question_page"] = (st.session_state["test_question_page"] + 1) % (len(test_questions) // 3)
    st.session_state["carousel_advance"] = True

    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏
    st.session_state.pop("chat_history", None)
    st.session_state.pop("my_question", None)
    st.session_state.pop("df", None)
    st.session_state.pop("user_input", None)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–Ω–æ–ø–æ–∫
start_index = st.session_state["test_question_page"] * 3
current_questions = test_questions[start_index:start_index + 3]

cols = st.columns([4, 4, 4, 1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –ø–æ–¥ ‚è≠Ô∏è

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
for i, col in enumerate(cols[:3]):
    if i < len(current_questions):
        q = current_questions[i]
        with col:
            if st.button(q, key=f"question_button_{start_index + i}"):
                st.session_state["my_question"] = q
                st.session_state["df"] = None
                st.session_state["user_input"] = q
                # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                st.session_state["carousel_advance"] = False

# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
with cols[3]:
    st.button("üîÑ", key="next_page", on_click=advance_carousel, help="–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã")


new_question = st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

if new_question:
    st.session_state["my_question"] = new_question
    st.session_state["df"] = None
    # Store user input for future checks
    st.session_state["user_input"] = new_question

# --- Render chat history ---
for i, entry in enumerate(st.session_state.chat_history):
    st.chat_message("user").write(entry["question"])
    assistant_msg = st.chat_message("assistant", avatar=avatar_url)

    if st.session_state.get("show_sql", True):
        assistant_msg.code(entry["sql"], language="sql")

    if st.session_state.get("show_table", True) and entry.get("df") is not None:
        df = entry["df"]
        if len(df) > 10:
            assistant_msg.text("First 10 rows of data")
            assistant_msg.dataframe(df.head(10))

            csv = df.to_csv(index=False)

            unique_key = f"download_button_{i}_{id(entry)}"

            st.download_button(
                label=f"Download Full Data (Q{i+1})",
                data=csv,
                file_name=f"full_data_{i}.csv",
                mime="text/csv",
                key=unique_key
            )
        else:
            assistant_msg.dataframe(df)

    if st.session_state.get("show_chart", True) and entry.get("df") is not None and entry.get("question") and entry.get("sql"):
        if should_generate_chart_cached(question=entry["question"], sql=entry["sql"], df=entry["df"]):
            code = generate_plotly_code_cached(question=entry["question"], sql=entry["sql"], df=entry["df"])
            if st.session_state.get("show_plotly_code", False):
                assistant_msg.code(code, language="python")
            if code:
                fig = generate_plot_cached(code=code, df=entry["df"])
                if fig:
                    assistant_msg.plotly_chart(fig)

    if st.session_state.get("show_summary", True):
        summary = entry.get("summary")
        if not summary:
            summary = generate_summary_cached(question=entry["question"] + " (–æ—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º)", df=entry["df"])
            entry["summary"] = summary
        if summary:
            assistant_msg.text(summary)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ---
my_question = st.session_state.get("my_question", None)

if my_question:
    st.chat_message("user").write(my_question)

    try:
        logging.info(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {my_question}")

        # –°–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        def df_to_string(df):
            if df is None or df.empty:
                return "No data"
            return df.head(5).to_csv(index=False)

        recent_context = st.session_state.chat_history[-5:]
        context_parts = []
        for entry in recent_context:
            part = f"Q: {entry['question']}\nSQL: {entry['sql']}"
            if entry.get("df") is not None:
                part += f"\nDATA:\n{df_to_string(entry['df'])}"
            context_parts.append(part)

        context_text = "\n\n".join(context_parts)
        full_question = f"{context_text}\n\nQ: {my_question}" if context_text else my_question

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL
        sql = generate_sql_cached(question=full_question)
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL: {sql}")

        if not sql or not is_sql_valid_cached(sql=sql):
            logging.error("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            st.chat_message("assistant", avatar=avatar_url).error("Generated SQL is invalid.")
            st.stop()

        # –ó–∞–ø—É—Å–∫ SQL
        df = run_sql_cached(sql=sql)
        if df is None or df.empty:
            logging.info("SQL-–∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö")
            #st.chat_message("assistant", avatar=avatar_url).error("Query returned no data.")
            #st.stop()

        logging.info(f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω SQL-–∑–∞–ø—Ä–æ—Å. –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫: {len(df)}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame
        st.session_state["df"] = df

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SQL, —Ç–∞–±–ª–∏—Ü—É, –≥—Ä–∞—Ñ–∏–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if st.session_state.get("show_sql", True):
            st.chat_message("assistant", avatar=avatar_url).code(sql, language="sql")

        if st.session_state.get("show_table", True):
            assistant_msg = st.chat_message("assistant", avatar=avatar_url)
            if len(df) > 10:
                assistant_msg.text("Displaying first 10 rows of data:")
                assistant_msg.dataframe(df.head(10))
                csv = df.to_csv(index=False)
                st.download_button(label="Download Full Data", data=csv, file_name="full_data.csv", mime="text/csv")
            else:
                assistant_msg.dataframe(df)

        # Summary
        summary = None
        if st.session_state.get("show_summary", True):
            summary = generate_summary_cached(question=my_question + " (–æ—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ)", df=df)
            if summary:
                st.chat_message("assistant", avatar=avatar_url).text(summary)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.chat_history.append({
            "question": my_question,
            "sql": sql,
            "df": df,
            "summary": summary
        })

        st.session_state["my_question"] = None

    except Exception as e:
        error_trace = traceback.format_exc()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}\n{error_trace}")
        st.chat_message("assistant", avatar=avatar_url).error("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

if ENABLE_LOG_DOWNLOAD:
    if os.path.exists("app.log"):
        with open("app.log", "r") as f:
            st.sidebar.download_button("Download log", f.read(), file_name="app.log", mime="text/plain", use_container_width=True)

# --- Show suggested questions ---
show_suggested_questions()
